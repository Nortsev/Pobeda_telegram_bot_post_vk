from aiogram import types, Dispatcher
from bot.create_bot import dp, bot
import logging
from post.run_post import post_products, publish_post
from aiogram.dispatcher import FSMContext
from post.create_date_base import SQLApi

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞
logging.basicConfig(level=logging.INFO)
info = []
store_engels = {
    'kosmonavtov': 'üè™—É–ª.–ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤ 19',
    'gorkogo': 'üè™–ú–∞–∫—Å–∏–º–∞ –ì–æ—Ä—å–∫–æ–≥–æ 33',
    '4kvartal': 'üè™4 –ö–≤–∞—Ä—Ç–∞–ª 9–∞',
}

store_saratov = {
    'Sovet': 'üè™–°–æ–≤–µ—Ç—Å–∫–∞—è 64/70',
    '50_let': 'üè™50 –ª–µ—Ç –æ–∫—Ç—è–±—Ä—è 89',
    'Chernishevskogo': 'üè™–ß–µ—Ä–Ω—ã—à–µ–≤—Å–∫–æ–≥–æ 217',
    'Sokolova': 'üè™–°–æ–∫–æ–ª–æ–≤–∞—è 309/9',
    'Emelytina': 'üè™–ï–º–ª—é—Ç–∏–Ω–∞ 51',
    '2_sadovaya': 'üè™2-—è –°–∞–¥–æ–≤–∞—è 28/34'
}

cites_name = {
    '–≠–Ω–≥–µ–ª—å—Å': store_engels,
    '–°–∞—Ä–∞—Ç–æ–≤': store_saratov
}
categories = {
    'phone': 'üì±–¢–µ–ª–µ—Ñ–æ–Ω—ã',
    'avto': 'üöò–ê–≤—Ç–æ',
    'instrument': 'üõ†–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç',
    'computer': 'üíª–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞',
    'tovar_dla_doma': 'üõÄ–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞',
    'tv_and_video': 'üì∫–¢–í –∏ –≤–∏–¥–µ–æ'
}


def create_reply_keyboard():
    return types.ReplyKeyboardMarkup(resize_keyboard=True)


def categories_keyboard(keyboard):
    for callback, store_info in categories.items():
        add_inline_button(keyboard, store_info, callback)


def create_inline_keyboard():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—å–µ–∫—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :return:
    """
    return types.InlineKeyboardMarkup()


def add_inline_button(keyboard, store_info, callback):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :return:
    """
    keyboard.add(types.InlineKeyboardButton(text=store_info, callback_data=callback))


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.message):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É –ù–∞—á–∞—Ç—å
    :return:
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['üëã–ù–∞—á–∞—Ç—å']
    keyboard.add(*buttons)
    print("–ù–∞—á–∞—Ç—å")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤–∫", reply_markup=keyboard)
    # await message.delete()


@dp.message_handler(text=['üëã–ù–∞—á–∞—Ç—å'])
async def post_vk(message: types.message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    :param message: –æ–±–µ–∫—Ç types.message –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
    :return: –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É
    """
    # user_name = message.from_user.username
    # sql = SQLApi()
    # authorization= sql.authorization_user(username=user_name)
    # if authorization == True:
    keyboard = create_reply_keyboard()
    buttons = [f'{city}' for city in cites_name]
    exit_button = ['üî¥–ó–∞–≤–µ—Ä—à–∏—Ç—å']
    keyboard.add(*buttons)
    keyboard.add(*exit_button)
    print("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", reply_markup=keyboard)
    # # await message.delete()
    # else:
    #     keyboard = create_reply_keyboard()
    #     exit_button = ['üî¥–ó–∞–≤–µ—Ä—à–∏—Ç—å']
    #     keyboard.add(*exit_button)
    #     await message.answer("‚Äº‚Äº‚Äº–í–´ –ù–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù–ù–´ –û–ë–†–ê–¢–ò–¢–ï–°–¨ –ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–£ @nortsev ‚Äº‚Äº‚Äº", reply_markup=keyboard)


@dp.message_handler(text=cites_name)
async def cmd_sity(message: types.Message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—à–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ñ–∏–ª–∏–∞–ª–æ–≤
    :param message: –æ–±–µ–∫—Ç types.message –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
    :return: –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫  info –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    """
    info.clear()
    city = message.text
    keyboard = create_inline_keyboard()
    for callback, store_info in cites_name[city].items():
        add_inline_button(keyboard, store_info, callback)
    info.append(city)
    print(f"–í—ã–±—Ä–∞–Ω {city}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª", reply_markup=keyboard)
    # await message.delete()


@dp.callback_query_handler(text=store_engels.keys())
async def smd_engels_filial_categories(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–∞–¥–∞ —ç–Ω–≥–µ–ª—å—Å–∞ –∏ –≤–æ–∑–≤—Ä–∞—à–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    :param call: –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
    :return: –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫  info –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    """
    print(f"–í—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª {store_engels[call.data]}")
    keyboard = create_inline_keyboard()
    categories_keyboard(keyboard)
    info.append(store_engels[call.data][1:])
    await call.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥—Ä–∏—é —Ñ–∏–ª–∏–∞–ª–∞  {store_engels[call.data]}", reply_markup=keyboard)


@dp.callback_query_handler(text=store_saratov.keys())
async def smd_saratov_filial_categories(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞ –°–∞—Ä–∞—Ç–æ–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—à–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    :param call: –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
    :return: –î–æ–±–∞–≤–ª—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ info –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª–∏–∞–ª–∞
    """
    print(f"–í—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª {store_saratov[call.data]}")
    keyboard = create_inline_keyboard()
    categories_keyboard(keyboard)
    info.append(store_saratov[call.data][1:])
    await call.message.answer(f"–í—ã–±—Ä–∞–Ω —Ñ–∏–ª–∏–∞–ª {store_saratov[call.data]}", reply_markup=keyboard)


@dp.callback_query_handler(text=categories.keys())
async def smd_fihish_info(call: types.CallbackQuery):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–æ–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    :param call: –û–±—ä–µ–∫—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
    :return: –î–æ–±–∞–≤–ª—è–µ—Ç –≤ –ª–∏—Å—Ç info –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """

    print(f"–í—ã–±—Ä–∞–Ω–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {categories[call.data]}")
    if len(info) == 1:
        info.append(categories[call.data][1:])
    else:
        info.insert(2, categories[call.data][1:])
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons_send = ['üìú–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç']
    buttons_end = ['üî¥–ó–∞–≤–µ—Ä—à–∏—Ç—å']
    keyboard.add(*buttons_send)
    keyboard.add(*buttons_end)
    await call.message.answer(f"–í—ã–±—Ä–∞–Ω–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {categories[call.data]}")
    await call.message.answer(
        f"–î–ª—è –æ–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤—ã –¥–∞–Ω–Ω—ã–µ –ì–æ—Ä–æ–¥: {info[0]}\n –§–∏–ª–∏–∞–ª: {info[1]}\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {info[2]}\n",
        reply_markup=keyboard)


@dp.message_handler(text="üî¥–ó–∞–≤–µ—Ä—à–∏—Ç—å")
async def cmd_end(message: types.Message):
    """
    –§—É–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param message: –æ–±–µ–∫—Ç types.message –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
    :return: –ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['üëã–ù–∞—á–∞—Ç—å']
    keyboard.add(*buttons)
    # await bot.delete_message(message.chat.id, message.message_id - 1)
    await message.answer("/start", reply_markup=keyboard)


@dp.message_handler(text="üìú–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
async def cmd_send(message: types.Message, state: FSMContext):
    """
    –ø—Ä–æ–≤–µ—Ä—è—Ç –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ info –Ω–∞ –Ω–∞ –ª–∏—á–∏–µ –≤—Å–µ—Ö 3 –æ–±—å–µ–∫—Ç–æ–≤ –∏ –æ–ø—Ä–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
    –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ info

    :param message:
    :return:
    """
    count = 0
    chat_id = message.chat.id
    keyboard = create_reply_keyboard()
    exit_button = ['üî¥–ó–∞–≤–µ—Ä—à–∏—Ç—å']
    keyboard.add(*exit_button)
    await message.answer(f"‚è≥–û–∂–∏–¥–∞–π—Ç–µ —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Å–∞–π—Ç–∞", reply_markup=keyboard)
    while count < 5:
        try:
            if len(info) == 3:
                products = post_products(info[1], info[2], chat_id)
                if len(products) > 3:
                    async with state.proxy() as product_save:
                        product_save['product'] = products
                        product_save['filial'] = info[1]
                        product_save['sity'] = info[0]
                    for product in products:
                        try:
                            await bot.send_photo(chat_id=message.chat.id, photo=product['photo'],
                                                 caption=f"–ü—Ä–æ–¥—É–∫—Ç {product['title']}"                                                                                         f"–ø–æ —Ü–µ–Ω–µ {product['price']}")
                        except:
                            await message.answer(f"–ü—Ä–æ–¥—É–∫—Ç{product['title']} –ø–æ —Ü–µ–Ω–µ {product['price']}")
                    post_button = ['üì©–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å']
                    keyboard.clean()
                    keyboard.add(*post_button)
                    await message.answer(f"–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", reply_markup=keyboard)
                    break
                else:
                    await message.answer(f"–î–∞–Ω–Ω—ã—Ö –≤ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥—Ä–∏–∏ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ø—Ä–æ–±—É—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                         reply_markup=keyboard)
                    await message.answer("/start")
                    break
            else:
                await message.answer(f"–î–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ø—Ä–æ–±—É—Ç–µ –∑–∞–Ω–æ–≤–æ", reply_markup=keyboard)
                await message.answer("/start")
                print("–ü–æ—Å—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω")
                break
        except ConnectionError:
            if count <= 5:
                count += 1
                continue
            else:
                await message.answer(f"üî¥–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–∞–π—Ç—É", reply_markup=keyboard)
                break
        except Exception:
            if count <= 5:
                count += 1
                continue
            else:
                await message.answer(f"üî¥–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", reply_markup=keyboard)
                break




@dp.message_handler(text="üì©–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
async def cmd_post(message: types.Message, state: FSMContext):
    """
    –ø—Ä–æ–≤–µ—Ä—è—Ç –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ info –Ω–∞ –Ω–∞ –ª–∏—á–∏–µ –≤—Å–µ—Ö 3 –æ–±—å–µ–∫—Ç–æ–≤ –∏ –æ–ø—Ä–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
    –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ info
    :param message:
    :return:
    """
    keyboard = create_reply_keyboard()
    exit_button = ['üî¥–ó–∞–≤–µ—Ä—à–∏—Ç—å']
    keyboard.add(*exit_button)
    await message.answer("üëâ–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏", reply_markup=keyboard)
    async with state.proxy() as product_save:
        products = product_save['product']
        filial = product_save['filial']
        sity = product_save['sity']
    chat_id = message.chat.id
    if publish_post(products, filial, sity, chat_id):
        print("–î–∞–Ω–Ω—ã–µ –æ–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã –≤ –≤–∫ –≥—Ä—É–ø–ø—É")
        await message.answer("üëç–í—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!–î–∞–Ω–Ω—ã–µ –æ–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã –≤ –≥—Ä—É–ø–ø—É –≤–∫–æ–Ω—Ç–∞–∫—Ç–µ")
        await message.answer("/start")
    else:
        await message.answer("üî¥–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º‚Äº")
        await message.answer("/start")


@dp.message_handler()
async def send_message(message: types.message):
    if message.text == "hello":
        await message.answer("Hello friend")
    else:
        await message.answer("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç")
    await message.delete()


def register_hendler(dp: Dispatcher):
    dp.register_message_handler(send_welcome, commands=['start', 'help'])
    dp.register_message_handler(post_vk, commands=['–û—Ç–ø—Ä–∞–≤–∏—Ç—å'])
